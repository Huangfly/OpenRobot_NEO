<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Openrobot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Openrobot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Nov 13 17:49:42 2017
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; loop() &rArr; publishDriveInformation() &rArr; updateOdometry(double) &rArr; [local to main_cpp]::tf::createQuaternionFromYaw(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">SVC_Handler</a><BR>
 <LI><a href="#[22]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">PendSV_Handler</a><BR>
 <LI><a href="#[36]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ADC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1e]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[38]">CAN1_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[39]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3a]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[37]">CAN1_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[65]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[66]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[63]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[81]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[72]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream1_IRQHandler</a> from drv_uart.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream5_IRQHandler</a> from drv_uart.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7d]">DMA2D_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream2_IRQHandler</a> from drv_uart.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[21]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[61]">ETH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2a]">EXTI0_IRQHandler</a> from drv_exti.o(i.EXTI0_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">EXTI15_10_IRQHandler</a> from drv_exti.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2b]">EXTI1_IRQHandler</a> from drv_exti.o(i.EXTI1_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2c]">EXTI2_IRQHandler</a> from drv_exti.o(i.EXTI2_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2d]">EXTI3_IRQHandler</a> from drv_exti.o(i.EXTI3_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2e]">EXTI4_IRQHandler</a> from drv_exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3b]">EXTI9_5_IRQHandler</a> from drv_exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[92]">Encoder_Counter_1</a> from main.o(i.Encoder_Counter_1) referenced from main.o(i.main)
 <LI><a href="#[93]">Encoder_Counter_2</a> from main.o(i.Encoder_Counter_2) referenced from main.o(i.main)
 <LI><a href="#[94]">Encoder_Counter_3</a> from main.o(i.Encoder_Counter_3) referenced from main.o(i.main)
 <LI><a href="#[28]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">FMC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[74]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1c]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[44]">I2C1_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[43]">I2C1_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[46]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[45]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6d]">I2C3_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">I2C3_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[83]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[82]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[80]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7c]">LTDC_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7b]">LTDC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1d]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1b]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_IRQHandler</a> from usbd_conf.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4e]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6f]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6e]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[71]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[70]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[25]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[22]">PendSV_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7f]">QUADSPI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[73]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[27]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1a]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7a]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7e]">SAI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[84]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[47]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[48]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[57]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[77]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[78]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[79]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[20]">SVC_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[23]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[86]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[26]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3c]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3f]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3e]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3d]">TIM1_UP_TIM10_IRQHandler</a> from drv_timer.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[40]">TIM2_IRQHandler</a> from drv_timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[41]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[42]">TIM4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[56]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">TIM6_DAC_IRQHandler</a> from drv_timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">TIM7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4f]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">TIM8_TRG_COM_TIM14_IRQHandler</a> from drv_timer.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[50]">TIM8_UP_TIM13_IRQHandler</a> from drv_timer.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[58]">UART4_IRQHandler</a> from drv_uart.o(i.UART4_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[75]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[76]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[49]">USART1_IRQHandler</a> from drv_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4a]">USART2_IRQHandler</a> from drv_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4b]">USART3_IRQHandler</a> from drv_uart.o(i.USART3_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6b]">USART6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1f]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[24]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[95]">timer_Handle()</a> from main.o(i._Z12timer_Handlev) referenced from main.o(i.main)
 <LI><a href="#[8d]">InitPoseCallback(const geometry_msgs::PoseWithCovarianceStamped&)</a> from main.o(i._Z16InitPoseCallbackRKN13geometry_msgs25PoseWithCovarianceStampedE) referenced from main.o(i.__sti___8_main_cpp_ttt_mp)
 <LI><a href="#[8c]">commandVelocityCallback(const geometry_msgs::Twist&)</a> from main.o(i._Z23commandVelocityCallbackRKN13geometry_msgs5TwistE) referenced from main.o(i.__sti___8_main_cpp_ttt_mp)
 <LI><a href="#[13]">USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z25USBD_VCP_DeviceDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[18]">USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z28USBD_VCP_ConfigStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[14]">USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z28USBD_VCP_LangIDStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[17]">USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z28USBD_VCP_SerialStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[16]">USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z29USBD_VCP_ProductStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[19]">USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z31USBD_VCP_InterfaceStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[15]">USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z34USBD_VCP_ManufacturerStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[12]">USBD_CDC_GetDeviceQualifierDescriptor(unsigned short*)</a> from usbd_cdc.o(i._Z37USBD_CDC_GetDeviceQualifierDescriptorPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[9c]">sensor_msgs::Imu::getMD5()</a> from main.o(i._ZN11sensor_msgs3Imu6getMD5Ev) referenced from main.o(.constdata__ZTVN11sensor_msgs3ImuE)
 <LI><a href="#[9b]">sensor_msgs::Imu::getType()</a> from main.o(i._ZN11sensor_msgs3Imu7getTypeEv) referenced from main.o(.constdata__ZTVN11sensor_msgs3ImuE)
 <LI><a href="#[91]">robot_serial::~robot_serial()</a> from cpackage.o(i._ZN12robot_serialD1Ev) referenced from main.o(i.__sti___8_main_cpp_ttt_mp)
 <LI><a href="#[9e]">geometry_msgs::Quaternion::deserialize(unsigned char*)</a> from main.o(i._ZN13geometry_msgs10Quaternion11deserializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
 <LI><a href="#[a0]">geometry_msgs::Quaternion::getMD5()</a> from main.o(i._ZN13geometry_msgs10Quaternion6getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
 <LI><a href="#[9f]">geometry_msgs::Quaternion::getType()</a> from main.o(i._ZN13geometry_msgs10Quaternion7getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
 <LI><a href="#[a3]">geometry_msgs::TransformStamped::getMD5()</a> from main.o(i._ZN13geometry_msgs16TransformStamped6getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs16TransformStampedE)
 <LI><a href="#[a2]">geometry_msgs::TransformStamped::getType()</a> from main.o(i._ZN13geometry_msgs16TransformStamped7getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs16TransformStampedE)
 <LI><a href="#[a5]">geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)</a> from main.o(i._ZN13geometry_msgs18PoseWithCovariance11deserializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs18PoseWithCovarianceE)
 <LI><a href="#[a7]">geometry_msgs::PoseWithCovariance::getMD5()</a> from main.o(i._ZN13geometry_msgs18PoseWithCovariance6getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs18PoseWithCovarianceE)
 <LI><a href="#[a6]">geometry_msgs::PoseWithCovariance::getType()</a> from main.o(i._ZN13geometry_msgs18PoseWithCovariance7getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs18PoseWithCovarianceE)
 <LI><a href="#[aa]">geometry_msgs::TwistWithCovariance::getMD5()</a> from main.o(i._ZN13geometry_msgs19TwistWithCovariance6getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs19TwistWithCovarianceE)
 <LI><a href="#[a9]">geometry_msgs::TwistWithCovariance::getType()</a> from main.o(i._ZN13geometry_msgs19TwistWithCovariance7getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs19TwistWithCovarianceE)
 <LI><a href="#[ac]">geometry_msgs::PoseWithCovarianceStamped::deserialize(unsigned char*)</a> from main.o(i._ZN13geometry_msgs25PoseWithCovarianceStamped11deserializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs25PoseWithCovarianceStampedE)
 <LI><a href="#[ae]">geometry_msgs::PoseWithCovarianceStamped::getMD5()</a> from main.o(i._ZN13geometry_msgs25PoseWithCovarianceStamped6getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs25PoseWithCovarianceStampedE)
 <LI><a href="#[ad]">geometry_msgs::PoseWithCovarianceStamped::getType()</a> from main.o(i._ZN13geometry_msgs25PoseWithCovarianceStamped7getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs25PoseWithCovarianceStampedE)
 <LI><a href="#[b0]">geometry_msgs::Pose::deserialize(unsigned char*)</a> from main.o(i._ZN13geometry_msgs4Pose11deserializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs4PoseE)
 <LI><a href="#[b2]">geometry_msgs::Pose::getMD5()</a> from main.o(i._ZN13geometry_msgs4Pose6getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs4PoseE)
 <LI><a href="#[b1]">geometry_msgs::Pose::getType()</a> from main.o(i._ZN13geometry_msgs4Pose7getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs4PoseE)
 <LI><a href="#[b4]">geometry_msgs::Point::deserialize(unsigned char*)</a> from main.o(i._ZN13geometry_msgs5Point11deserializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs5PointE)
 <LI><a href="#[b6]">geometry_msgs::Point::getMD5()</a> from main.o(i._ZN13geometry_msgs5Point6getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs5PointE)
 <LI><a href="#[b5]">geometry_msgs::Point::getType()</a> from main.o(i._ZN13geometry_msgs5Point7getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs5PointE)
 <LI><a href="#[b8]">geometry_msgs::Twist::deserialize(unsigned char*)</a> from main.o(i._ZN13geometry_msgs5Twist11deserializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[ba]">geometry_msgs::Twist::getMD5()</a> from main.o(i._ZN13geometry_msgs5Twist6getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[b9]">geometry_msgs::Twist::getType()</a> from main.o(i._ZN13geometry_msgs5Twist7getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[bc]">geometry_msgs::Vector3::deserialize(unsigned char*)</a> from main.o(i._ZN13geometry_msgs7Vector311deserializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[be]">geometry_msgs::Vector3::getMD5()</a> from main.o(i._ZN13geometry_msgs7Vector36getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[bd]">geometry_msgs::Vector3::getType()</a> from main.o(i._ZN13geometry_msgs7Vector37getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[c1]">geometry_msgs::Transform::getMD5()</a> from main.o(i._ZN13geometry_msgs9Transform6getMD5Ev) referenced from main.o(.constdata__ZTVN13geometry_msgs9TransformE)
 <LI><a href="#[c0]">geometry_msgs::Transform::getType()</a> from main.o(i._ZN13geometry_msgs9Transform7getTypeEv) referenced from main.o(.constdata__ZTVN13geometry_msgs9TransformE)
 <LI><a href="#[c3]">rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)</a> from main.o(i._ZN14rosserial_msgs20RequestParamResponse11deserializeEPh) referenced from main.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[c5]">rosserial_msgs::RequestParamResponse::getMD5()</a> from main.o(i._ZN14rosserial_msgs20RequestParamResponse6getMD5Ev) referenced from main.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[c4]">rosserial_msgs::RequestParamResponse::getType()</a> from main.o(i._ZN14rosserial_msgs20RequestParamResponse7getTypeEv) referenced from main.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[c8]">rosserial_msgs::Log::getMD5()</a> from main.o(i._ZN14rosserial_msgs3Log6getMD5Ev) referenced from main.o(.constdata__ZTVN14rosserial_msgs3LogE)
 <LI><a href="#[c7]">rosserial_msgs::Log::getType()</a> from main.o(i._ZN14rosserial_msgs3Log7getTypeEv) referenced from main.o(.constdata__ZTVN14rosserial_msgs3LogE)
 <LI><a href="#[cb]">rosserial_msgs::TopicInfo::getMD5()</a> from main.o(i._ZN14rosserial_msgs9TopicInfo6getMD5Ev) referenced from main.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
 <LI><a href="#[ca]">rosserial_msgs::TopicInfo::getType()</a> from main.o(i._ZN14rosserial_msgs9TopicInfo7getTypeEv) referenced from main.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
 <LI><a href="#[ce]">turtlebot3_msgs::SensorState::getMD5()</a> from main.o(i._ZN15turtlebot3_msgs11SensorState6getMD5Ev) referenced from main.o(.constdata__ZTVN15turtlebot3_msgs11SensorStateE)
 <LI><a href="#[cd]">turtlebot3_msgs::SensorState::getType()</a> from main.o(i._ZN15turtlebot3_msgs11SensorState7getTypeEv) referenced from main.o(.constdata__ZTVN15turtlebot3_msgs11SensorStateE)
 <LI><a href="#[d1]">tf::tfMessage::getMD5()</a> from main.o(i._ZN2tf9tfMessage6getMD5Ev) referenced from main.o(.constdata__ZTVN2tf9tfMessageE)
 <LI><a href="#[d0]">tf::tfMessage::getType()</a> from main.o(i._ZN2tf9tfMessage7getTypeEv) referenced from main.o(.constdata__ZTVN2tf9tfMessageE)
 <LI><a href="#[9]">[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC13USBD_CDC_InitEP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[b]">[local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC14USBD_CDC_SetupEP19_USBD_HandleTypeDefP13usb_setup_req) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[d]">[local to usbd_cdc_c]::USBD_CDC_DataIn(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC15USBD_CDC_DataInEP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[a]">[local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC15USBD_CDC_DeInitEP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[e]">[local to usbd_cdc_c]::USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC16USBD_CDC_DataOutEP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[c]">[local to usbd_cdc_c]::USBD_CDC_EP0_RxReady(_USBD_HandleTypeDef*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC20USBD_CDC_EP0_RxReadyEP19_USBD_HandleTypeDef) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[10]">[local to usbd_cdc_c]::USBD_CDC_GetFSCfgDesc(unsigned short*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC21USBD_CDC_GetFSCfgDescEPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[f]">[local to usbd_cdc_c]::USBD_CDC_GetHSCfgDesc(unsigned short*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC21USBD_CDC_GetHSCfgDescEPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[11]">[local to usbd_cdc_c]::USBD_CDC_GetOtherSpeedCfgDesc(unsigned short*)</a> from usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC29USBD_CDC_GetOtherSpeedCfgDescEPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[d4]">ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::getMsgType()</a> from main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvE10getMsgTypeEv) referenced from main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEE)
 <LI><a href="#[d3]">ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::getEndpointType()</a> from main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvE15getEndpointTypeEv) referenced from main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEE)
 <LI><a href="#[d2]">ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::callback(unsigned char*)</a> from main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvE8callbackEPh) referenced from main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEE)
 <LI><a href="#[d5]">ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::getMsgMD5()</a> from main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvE9getMsgMD5Ev) referenced from main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEE)
 <LI><a href="#[d8]">ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getMsgType()</a> from main.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv) referenced from main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
 <LI><a href="#[d7]">ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getEndpointType()</a> from main.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv) referenced from main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
 <LI><a href="#[d6]">ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::callback(unsigned char*)</a> from main.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh) referenced from main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
 <LI><a href="#[d9]">ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getMsgMD5()</a> from main.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev) referenced from main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
 <LI><a href="#[da]">ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::publish(int, const ros::Msg*)</a> from main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE) referenced from main.o(.constdata__ZTVN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EEE)
 <LI><a href="#[db]">ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::spinOnce()</a> from main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv) referenced from main.o(.constdata__ZTVN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EEE)
 <LI><a href="#[8b]">[local to stm32f7xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</a> from stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[8a]">[local to stm32f7xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</a> from stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[89]">[local to stm32f7xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[88]">[local to stm32f7xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</a> from stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[5]">[local to usbd_cdc_interface_c]::CDC_Itf_Init()</a> from usbd_cdc_interface.o(i._ZN42_INTERNAL_20_usbd_cdc_interface_c_691df63312CDC_Itf_InitEv) referenced 2 times from usbd_cdc_interface.o(.data)
 <LI><a href="#[6]">[local to usbd_cdc_interface_c]::CDC_Itf_DeInit()</a> from usbd_cdc_interface.o(i._ZN42_INTERNAL_20_usbd_cdc_interface_c_691df63314CDC_Itf_DeInitEv) referenced 2 times from usbd_cdc_interface.o(.data)
 <LI><a href="#[7]">[local to usbd_cdc_interface_c]::CDC_Itf_Control(unsigned char, unsigned char*, unsigned short)</a> from usbd_cdc_interface.o(i._ZN42_INTERNAL_20_usbd_cdc_interface_c_691df63315CDC_Itf_ControlEhPht) referenced 2 times from usbd_cdc_interface.o(.data)
 <LI><a href="#[8]">[local to usbd_cdc_interface_c]::CDC_Itf_Receive(unsigned char*, unsigned*)</a> from usbd_cdc_interface.o(i._ZN42_INTERNAL_20_usbd_cdc_interface_c_691df63315CDC_Itf_ReceiveEPhPj) referenced 2 times from usbd_cdc_interface.o(.data)
 <LI><a href="#[8f]">CMotor::~CMotor()</a> from cmotor.o(i._ZN6CMotorD1Ev) referenced from main.o(i.__sti___8_main_cpp_ttt_mp)
 <LI><a href="#[90]">CSonar::~CSonar()</a> from csonar.o(i._ZN6CSonarD1Ev) referenced from main.o(i.__sti___8_main_cpp_ttt_mp)
 <LI><a href="#[8e]">CKalman::~CKalman()</a> from ckalman.o(i._ZN7CKalmanD1Ev) referenced from main.o(i.__sti___8_main_cpp_ttt_mp)
 <LI><a href="#[de]">nav_msgs::Odometry::getMD5()</a> from main.o(i._ZN8nav_msgs8Odometry6getMD5Ev) referenced from main.o(.constdata__ZTVN8nav_msgs8OdometryE)
 <LI><a href="#[dd]">nav_msgs::Odometry::getType()</a> from main.o(i._ZN8nav_msgs8Odometry7getTypeEv) referenced from main.o(.constdata__ZTVN8nav_msgs8OdometryE)
 <LI><a href="#[e0]">std_msgs::Time::deserialize(unsigned char*)</a> from main.o(i._ZN8std_msgs4Time11deserializeEPh) referenced from main.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[e2]">std_msgs::Time::getMD5()</a> from main.o(i._ZN8std_msgs4Time6getMD5Ev) referenced from main.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[e1]">std_msgs::Time::getType()</a> from main.o(i._ZN8std_msgs4Time7getTypeEv) referenced from main.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[e4]">std_msgs::Header::deserialize(unsigned char*)</a> from main.o(i._ZN8std_msgs6Header11deserializeEPh) referenced from main.o(.constdata__ZTVN8std_msgs6HeaderE)
 <LI><a href="#[e6]">std_msgs::Header::getMD5()</a> from main.o(i._ZN8std_msgs6Header6getMD5Ev) referenced from main.o(.constdata__ZTVN8std_msgs6HeaderE)
 <LI><a href="#[e5]">std_msgs::Header::getType()</a> from main.o(i._ZN8std_msgs6Header7getTypeEv) referenced from main.o(.constdata__ZTVN8std_msgs6HeaderE)
 <LI><a href="#[97]">UARTClass::available()</a> from uartclass.o(i._ZN9UARTClass9availableEv) referenced from uartclass.o(.constdata__ZTV9UARTClass)
 <LI><a href="#[98]">USBSerial::read()</a> from usbserial.o(i._ZN9USBSerial4readEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[99]">USBSerial::write(const unsigned char*, unsigned)</a> from usbserial.o(i._ZN9USBSerial5writeEPKhj) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[9a]">sensor_msgs::Imu::serialize(unsigned char*) const</a> from main.o(i._ZNK11sensor_msgs3Imu9serializeEPh) referenced from main.o(.constdata__ZTVN11sensor_msgs3ImuE)
 <LI><a href="#[9d]">geometry_msgs::Quaternion::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs10Quaternion9serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
 <LI><a href="#[a1]">geometry_msgs::TransformStamped::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs16TransformStamped9serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs16TransformStampedE)
 <LI><a href="#[a4]">geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs18PoseWithCovariance9serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs18PoseWithCovarianceE)
 <LI><a href="#[a8]">geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs19TwistWithCovariance9serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs19TwistWithCovarianceE)
 <LI><a href="#[ab]">geometry_msgs::PoseWithCovarianceStamped::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs25PoseWithCovarianceStamped9serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs25PoseWithCovarianceStampedE)
 <LI><a href="#[af]">geometry_msgs::Pose::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs4Pose9serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs4PoseE)
 <LI><a href="#[b3]">geometry_msgs::Point::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs5Point9serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs5PointE)
 <LI><a href="#[b7]">geometry_msgs::Twist::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs5Twist9serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs5TwistE)
 <LI><a href="#[bb]">geometry_msgs::Vector3::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs7Vector39serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs7Vector3E)
 <LI><a href="#[bf]">geometry_msgs::Transform::serialize(unsigned char*) const</a> from main.o(i._ZNK13geometry_msgs9Transform9serializeEPh) referenced from main.o(.constdata__ZTVN13geometry_msgs9TransformE)
 <LI><a href="#[c2]">rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const</a> from main.o(i._ZNK14rosserial_msgs20RequestParamResponse9serializeEPh) referenced from main.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
 <LI><a href="#[c6]">rosserial_msgs::Log::serialize(unsigned char*) const</a> from main.o(i._ZNK14rosserial_msgs3Log9serializeEPh) referenced from main.o(.constdata__ZTVN14rosserial_msgs3LogE)
 <LI><a href="#[c9]">rosserial_msgs::TopicInfo::serialize(unsigned char*) const</a> from main.o(i._ZNK14rosserial_msgs9TopicInfo9serializeEPh) referenced from main.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
 <LI><a href="#[cc]">turtlebot3_msgs::SensorState::serialize(unsigned char*) const</a> from main.o(i._ZNK15turtlebot3_msgs11SensorState9serializeEPh) referenced from main.o(.constdata__ZTVN15turtlebot3_msgs11SensorStateE)
 <LI><a href="#[cf]">tf::tfMessage::serialize(unsigned char*) const</a> from main.o(i._ZNK2tf9tfMessage9serializeEPh) referenced from main.o(.constdata__ZTVN2tf9tfMessageE)
 <LI><a href="#[dc]">nav_msgs::Odometry::serialize(unsigned char*) const</a> from main.o(i._ZNK8nav_msgs8Odometry9serializeEPh) referenced from main.o(.constdata__ZTVN8nav_msgs8OdometryE)
 <LI><a href="#[df]">std_msgs::Time::serialize(unsigned char*) const</a> from main.o(i._ZNK8std_msgs4Time9serializeEPh) referenced from main.o(.constdata__ZTVN8std_msgs4TimeE)
 <LI><a href="#[e3]">std_msgs::Header::serialize(unsigned char*) const</a> from main.o(i._ZNK8std_msgs6Header9serializeEPh) referenced from main.o(.constdata__ZTVN8std_msgs6HeaderE)
 <LI><a href="#[96]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from usbserial.o(.constdata__ZTV5Print)
 <LI><a href="#[96]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 5 times from usbserial.o(.constdata__ZTV6Stream)
 <LI><a href="#[96]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from main.o(.constdata__ZTVN3ros11Subscriber_E)
 <LI><a href="#[96]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from main.o(.constdata__ZTVN3ros15NodeHandleBase_E)
 <LI><a href="#[96]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from main.o(.constdata__ZTVN3ros3MsgE)
 <LI><a href="#[87]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[e8]">__sti___10_drv_uart_c_81d51d31</a> from drv_uart.o(i.__sti___10_drv_uart_c_81d51d31) referenced from drv_uart.o(.init_array)
 <LI><a href="#[e9]">__sti___7_SPI_cpp_SPI</a> from spi.o(i.__sti___7_SPI_cpp_SPI) referenced from spi.o(.init_array)
 <LI><a href="#[e7]">__sti___8_main_cpp_ttt_mp</a> from main.o(i.__sti___8_main_cpp_ttt_mp) referenced from main.o(.init_array)
 <LI><a href="#[85]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[87]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[273]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[eb]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[110]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[274]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ed]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[275]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[276]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[277]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ee]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[278]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[279]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClass::UARTClass(unsigned char, unsigned char)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::serialize(unsigned char*) const
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::TopicInfo::serialize(unsigned char*) const
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::Log::serialize(unsigned char*) const
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TransformStamped::serialize(unsigned char*) const
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_TxISR()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[27d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robot_serial::robot_serial()
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::Odometry()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::PoseWithCovariance()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[27f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[234]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::serialize(unsigned char*) const
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::TopicInfo::serialize(unsigned char*) const
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::Log::serialize(unsigned char*) const
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TransformStamped::serialize(unsigned char*) const
</UL>

<P><STRONG><a name="[ea]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoseCallback(const geometry_msgs::PoseWithCovarianceStamped&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::updateIMU(float, float, float, float, float, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::computeAngles()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoseCallback(const geometry_msgs::PoseWithCovarianceStamped&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::updateIMU(float, float, float, float, float, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::computeAngles()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoseCallback(const geometry_msgs::PoseWithCovarianceStamped&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::updateIMU(float, float, float, float, float, float)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::invSqrt(float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::computeAngles()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoseCallback(const geometry_msgs::PoseWithCovarianceStamped&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::updateIMU(float, float, float, float, float, float)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::invSqrt(float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::computeAngles()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::begin(unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_controller(MOTOR_PID*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKalman::update(float)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_controller(MOTOR_PID*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKalman::update(float)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_controller(MOTOR_PID*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::tf::createQuaternionFromYaw(double)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKalman::update(float)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_calculate(Wheel*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishDriveInformation()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKalman::update(float)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishImuMsg()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::begin(unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_calculate(Wheel*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishDriveInformation()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_controller(MOTOR_PID*)
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKalman::update(float)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoseCallback(const geometry_msgs::PoseWithCovarianceStamped&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Handle()
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_controller(MOTOR_PID*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_controller(MOTOR_PID*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotor::FeedbackSpeed(double, double, double)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::tf::createQuaternionFromYaw(double)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKalman::update(float)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_calculate(Wheel*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::updateIMU(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[281]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[282]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[283]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[235]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[ef]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[f8]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>

<P><STRONG><a name="[f7]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[241]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[285]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>_fsqrt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[100]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ff]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10f]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[ec]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[286]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[288]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>Count_and_Direction</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cmotor.o(i.Count_and_Direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Count_and_Direction &rArr; digitalRead
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Counter_3
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Counter_2
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Counter_1
</UL>

<P><STRONG><a name="[30]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_uart.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_uart.o(i.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_uart.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_exti.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_exti.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_exti.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, drv_exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Encoder_Counter_1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.Encoder_Counter_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder_Counter_1 &rArr; Count_and_Direction &rArr; digitalRead
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_and_Direction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[93]"></a>Encoder_Counter_2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.Encoder_Counter_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder_Counter_2 &rArr; Count_and_Direction &rArr; digitalRead
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_and_Direction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[94]"></a>Encoder_Counter_3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.Encoder_Counter_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder_Counter_3 &rArr; Count_and_Direction &rArr; digitalRead
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_and_Direction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[189]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[118]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>

<P><STRONG><a name="[11a]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_exti.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to drv_exti_c]::drv_exti_attach(unsigned, void(*)(), unsigned)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_Led_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[115]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Counter_3
</UL>

<P><STRONG><a name="[191]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_Led_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[119]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::begin(unsigned)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoHardware::time()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishDriveInformation()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[11b]"></a>HAL_IWDG_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f7xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdg_setup
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[170]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[15a]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to drv_exti_c]::drv_exti_attach(unsigned, void(*)(), unsigned)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[121]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_cortex_c]::NVIC_GetPriorityGrouping()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to drv_exti_c]::drv_exti_attach(unsigned, void(*)(), unsigned)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[11d]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[157]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f7xx_hal_pcd_ex.o(i.HAL_PCDEx_ActivateLPM))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f7xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ConnectCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[12e]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[130]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[132]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[135]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[138]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[139]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1716 bytes, Stack size 48 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_pcd_c]::PCD_WriteEmptyTxFifo(PCD_HandleTypeDef*, unsigned)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>HAL_PCD_Init</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[151]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[149]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ResumeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_PCD_SOFCallback &rArr; CDC_Itf_TxISR() &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_TxISR()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[13e]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>HAL_PCD_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[144]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[167]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[168]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[148]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[16a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1214 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[257]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[120]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[176]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_timer.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_timer.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timer_pause
</UL>

<P><STRONG><a name="[16d]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timer_resume
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_micros_init
</UL>

<P><STRONG><a name="[16c]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_timer.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[16e]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, drv_timer.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[25a]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_micros_init
</UL>

<P><STRONG><a name="[25f]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timer_resume
</UL>

<P><STRONG><a name="[172]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; [local to stm32f7xx_hal_tim_ex_c]::TIM_OC6_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_tim_ex_c]::TIM_OC6_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_tim_ex_c]::TIM_OC5_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_duty
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_motor_pwm_init
</UL>

<P><STRONG><a name="[180]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_motor_pwm_init
</UL>

<P><STRONG><a name="[181]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, drv_motor.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_PWM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_duty
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_motor_pwm_init
</UL>

<P><STRONG><a name="[175]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_UART_ErrorCallback &rArr; drv_uart_err_handler &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_err_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[186]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_UART_IRQHandler &rArr; [local to stm32f7xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; Rx2_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_EndTransmit_IT(UART_HandleTypeDef*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_EndRxTransfer(UART_HandleTypeDef*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_Transmit_IT(UART_HandleTypeDef*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_start_rx
</UL>

<P><STRONG><a name="[260]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_start_rx
</UL>

<P><STRONG><a name="[18d]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drv_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; Rx2_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx2_Handler()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx1_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[20b]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[20c]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_EndTransmit_IT(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[1c]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>IIC_Ack</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, myiic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[193]"></a>IIC_Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, myiic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[194]"></a>IIC_NAck</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, myiic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[195]"></a>IIC_Read_Byte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, myiic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[197]"></a>IIC_Send_Byte</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[198]"></a>IIC_Start</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[199]"></a>IIC_Stop</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[19a]"></a>IIC_Wait_Ack</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Wait_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[19b]"></a>MPU9250_Init</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, mpu9250_iic.o(i.MPU9250_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MPU9250_Init &rArr; MPU_Set_Rate &rArr; MPU_Set_LPF(unsigned short) &rArr; MPU_Write_Byte &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::init()
</UL>

<P><STRONG><a name="[1a2]"></a>MPU_Get_Accelerometer</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mpu9250_iic.o(i.MPU_Get_Accelerometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Get_Accelerometer &rArr; MPU_Read_Len &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::acc_get_adc()
</UL>

<P><STRONG><a name="[1a4]"></a>MPU_Get_Gyroscope</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mpu9250_iic.o(i.MPU_Get_Gyroscope))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::gyro_get_adc()
</UL>

<P><STRONG><a name="[1a1]"></a>MPU_Read_Byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mpu9250_iic.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[1a3]"></a>MPU_Read_Len</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mpu9250_iic.o(i.MPU_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Read_Len &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
</UL>

<P><STRONG><a name="[19f]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu9250_iic.o(i.MPU_Set_Accel_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Set_Accel_Fsr &rArr; MPU_Write_Byte &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[19e]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mpu9250_iic.o(i.MPU_Set_Gyro_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Set_Gyro_Fsr &rArr; MPU_Write_Byte &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[1a0]"></a>MPU_Set_Rate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpu9250_iic.o(i.MPU_Set_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MPU_Set_Rate &rArr; MPU_Set_LPF(unsigned short) &rArr; MPU_Write_Byte &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF(unsigned short)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[19d]"></a>MPU_Write_Byte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mpu9250_iic.o(i.MPU_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_Write_Byte &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF(unsigned short)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
</UL>

<P><STRONG><a name="[1d]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_conf.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>SystemClock_Config</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, system_clock.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[86]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_timer.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_timer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_timer.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_timer.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[183]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[17a]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[17b]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[17c]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[17d]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[58]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; [local to stm32f7xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; Rx2_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; [local to stm32f7xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; Rx2_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; [local to stm32f7xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; Rx2_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; [local to stm32f7xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; Rx2_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_interface_c]::CDC_Itf_Receive(unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[256]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[20d]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_interface_c]::CDC_Itf_Init()
</UL>

<P><STRONG><a name="[1dd]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_SetTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_TxISR()
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_interface_c]::CDC_Itf_Init()
</UL>

<P><STRONG><a name="[1ab]"></a>USBD_CDC_TransmitPacket</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_TxISR()
</UL>

<P><STRONG><a name="[207]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[1ae]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1af]"></a>USBD_CtlError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1b1]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[1b2]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1b3]"></a>USBD_CtlSendData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1b4]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1b5]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetLen(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
</UL>

<P><STRONG><a name="[1b7]"></a>USBD_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[1b9]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1ba]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[127]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[129]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[125]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[12b]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[1bc]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[1b8]"></a>USBD_LL_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1cf]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[14e]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[14f]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[1c0]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[1aa]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[15b]"></a>USBD_LL_Reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[15d]"></a>USBD_LL_Resume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[15e]"></a>USBD_LL_SOF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[15c]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1c1]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[162]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[1b0]"></a>USBD_LL_StallEP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1c6]"></a>USBD_LL_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[166]"></a>USBD_LL_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[1ac]"></a>USBD_LL_Transmit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[1c2]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[255]"></a>USBD_RegisterClass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[1bb]"></a>USBD_RunTestMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[206]"></a>USBD_SetClassConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[1c7]"></a>USBD_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[1c3]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_StdDevReq &rArr; [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1c5]"></a>USBD_StdEPReq</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1c4]"></a>USBD_StdItfReq</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[131]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[146]"></a>USB_ActivateSetup</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>USB_CoreInit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f7xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_ll_usb_c]::USB_CoreReset(USB_OTG_GlobalTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[12d]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[164]"></a>USB_DevConnect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[158]"></a>USB_DevDisconnect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[156]"></a>USB_DevInit</STRONG> (Thumb, 412 bytes, Stack size 28 bytes, stm32f7xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[152]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[133]"></a>USB_EP0StartXfer</STRONG> (Thumb, 422 bytes, Stack size 12 bytes, stm32f7xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[137]"></a>USB_EP0_OutStart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[12f]"></a>USB_EPClearStall</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[136]"></a>USB_EPSetStall</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[134]"></a>USB_EPStartXfer</STRONG> (Thumb, 714 bytes, Stack size 24 bytes, stm32f7xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[165]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1d2]"></a>USB_FlushRxFifo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[145]"></a>USB_FlushTxFifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>USB_GetDevSpeed</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[263]"></a>USB_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.USB_Init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>USB_ReadInterrupts</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>USB_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>USB_SetCurrentMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f7xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[161]"></a>USB_SetDevAddress</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[1d1]"></a>USB_SetDevSpeed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_SetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[1d3]"></a>USB_WritePacket</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f7xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_pcd_c]::PCD_WriteEmptyTxFifo(PCD_HandleTypeDef*, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>

<P><STRONG><a name="[1f]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>MPU_Set_LPF(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpu9250_iic.o(i._Z11MPU_Set_LPFt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Set_LPF(unsigned short) &rArr; MPU_Write_Byte &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[18e]"></a>Rx1_Handler()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(i._Z11Rx1_Handlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Rx1_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClass::RxHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[18f]"></a>Rx2_Handler()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(i._Z11Rx2_Handlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Rx2_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClass::RxHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[95]"></a>timer_Handle()</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, main.o(i._Z12timer_Handlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = timer_Handle() &rArr; CMotor::controller() &rArr; PID_controller(MOTOR_PID*) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotor::setSpeed(double, double, double)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotor::FeedbackSpeed(double, double, double)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotor::controller()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity_calculate(Wheel*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1da]"></a>CDC_Itf_Getch()</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, usbd_cdc_interface.o(i._Z13CDC_Itf_Getchv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CDC_Itf_Getch()
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_IsAvailable()
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_getch
</UL>

<P><STRONG><a name="[15f]"></a>CDC_Itf_TxISR()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd_cdc_interface.o(i._Z13CDC_Itf_TxISRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CDC_Itf_TxISR() &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[1de]"></a>CDC_Itf_Write(unsigned char*, unsigned)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usbd_cdc_interface.o(i._Z13CDC_Itf_WritePhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CDC_Itf_Write(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_interface_c]::CDC_Itf_TxAvailable()
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_write
</UL>

<P><STRONG><a name="[1e0]"></a>publishImuMsg()</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, main.o(i._Z13publishImuMsgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = publishImuMsg() &rArr; ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now() &rArr; ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::publish(const ros::Msg*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf::TransformBroadcaster::sendTransform(geometry_msgs::TransformStamped&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[1e4]"></a>PID_controller(MOTOR_PID*)</STRONG> (Thumb, 610 bytes, Stack size 64 bytes, cmotor.o(i._Z14PID_controllerP9MOTOR_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PID_controller(MOTOR_PID*) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_duty
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotor::controller()
</UL>

<P><STRONG><a name="[1e8]"></a>updateOdometry(double)</STRONG> (Thumb, 910 bytes, Stack size 144 bytes, main.o(i._Z14updateOdometryd))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = updateOdometry(double) &rArr; [local to main_cpp]::tf::createQuaternionFromYaw(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::tf::createQuaternionFromYaw(double)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKalman::update(float)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishDriveInformation()
</UL>

<P><STRONG><a name="[8d]"></a>InitPoseCallback(const geometry_msgs::PoseWithCovarianceStamped&)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, main.o(i._Z16InitPoseCallbackRKN13geometry_msgs25PoseWithCovarianceStampedE))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitPoseCallback(const geometry_msgs::PoseWithCovarianceStamped&) &rArr; atan2f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_ttt_mp)
</UL>
<P><STRONG><a name="[26d]"></a>CDC_Itf_Available()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_cdc_interface.o(i._Z17CDC_Itf_Availablev))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_is_available
</UL>

<P><STRONG><a name="[1d5]"></a>velocity_calculate(Wheel*)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, cmotor.o(i._Z18velocity_calculateP5Wheel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = velocity_calculate(Wheel*) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Handle()
</UL>

<P><STRONG><a name="[1db]"></a>CDC_Itf_IsAvailable()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_cdc_interface.o(i._Z19CDC_Itf_IsAvailablev))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_Getch()
</UL>

<P><STRONG><a name="[1ef]"></a>publishSensorStateMsg()</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, main.o(i._Z21publishSensorStateMsgv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = publishSensorStateMsg() &rArr; ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now() &rArr; ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotor::readEncoder(int&, int&, int&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::publish(const ros::Msg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[8c]"></a>commandVelocityCallback(const geometry_msgs::Twist&)</STRONG> (Thumb, 472 bytes, Stack size 96 bytes, main.o(i._Z23commandVelocityCallbackRKN13geometry_msgs5TwistE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = commandVelocityCallback(const geometry_msgs::Twist&) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_ttt_mp)
</UL>
<P><STRONG><a name="[1f3]"></a>publishDriveInformation()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, main.o(i._Z23publishDriveInformationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = publishDriveInformation() &rArr; updateOdometry(double) &rArr; [local to main_cpp]::tf::createQuaternionFromYaw(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::publish(const ros::Msg*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf::TransformBroadcaster::sendTransform(geometry_msgs::TransformStamped&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTF(geometry_msgs::TransformStamped&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[13]"></a>USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i._Z25USBD_VCP_DeviceDescriptor17USBD_SpeedTypeDefPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i._Z28USBD_VCP_ConfigStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i._Z28USBD_VCP_LangIDStrDescriptor17USBD_SpeedTypeDefPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_desc.o(i._Z28USBD_VCP_SerialStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; [local to usbd_desc_c]::Get_SerialNum() &rArr; [local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_desc_c]::Get_SerialNum()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i._Z29USBD_VCP_ProductStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i._Z31USBD_VCP_InterfaceStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i._Z34USBD_VCP_ManufacturerStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_CDC_GetDeviceQualifierDescriptor(unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i._Z37USBD_CDC_GetDeviceQualifierDescriptorPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[25c]"></a>map(long, long, long, long, long)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wmath.o(i._Z3maplllll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = map(long, long, long, long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_duty
</UL>

<P><STRONG><a name="[1f6]"></a>loop()</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, main.o(i._Z4loopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = loop() &rArr; publishDriveInformation() &rArr; updateOdometry(double) &rArr; [local to main_cpp]::tf::createQuaternionFromYaw(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::write(const unsigned char*, unsigned)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::update(unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::spinOnce()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishDriveInformation()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishSensorStateMsg()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishImuMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>updateTF(geometry_msgs::TransformStamped&)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i._Z8updateTFRN13geometry_msgs16TransformStampedE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = updateTF(geometry_msgs::TransformStamped&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishDriveInformation()
</UL>

<P><STRONG><a name="[9c]"></a>sensor_msgs::Imu::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN11sensor_msgs3Imu6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN11sensor_msgs3ImuE)
</UL>
<P><STRONG><a name="[9b]"></a>sensor_msgs::Imu::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN11sensor_msgs3Imu7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN11sensor_msgs3ImuE)
</UL>
<P><STRONG><a name="[1f8]"></a>sensor_msgs::Imu::Imu()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i._ZN11sensor_msgs3ImuC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensor_msgs::Imu::Imu() &rArr; std_msgs::Header::Header()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::Vector3()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::Quaternion()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[28b]"></a>sensor_msgs::Imu::Imu__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN11sensor_msgs3ImuC1Ev), UNUSED)

<P><STRONG><a name="[1fd]"></a>robot_serial::robot_serial()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cpackage.o(i._ZN12robot_serialC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robot_serial::robot_serial()
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[28c]"></a>robot_serial::robot_serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, cpackage.o(i._ZN12robot_serialC1Ev), UNUSED)

<P><STRONG><a name="[91]"></a>robot_serial::~robot_serial()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpackage.o(i._ZN12robot_serialD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_ttt_mp)
</UL>
<P><STRONG><a name="[28d]"></a>robot_serial::~robot_serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cpackage.o(i._ZN12robot_serialD1Ev), UNUSED)

<P><STRONG><a name="[9e]"></a>geometry_msgs::Quaternion::deserialize(unsigned char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs10Quaternion11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = geometry_msgs::Quaternion::deserialize(unsigned char*) &rArr; ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Pose::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
</UL>
<P><STRONG><a name="[a0]"></a>geometry_msgs::Quaternion::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs10Quaternion6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
</UL>
<P><STRONG><a name="[9f]"></a>geometry_msgs::Quaternion::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs10Quaternion7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
</UL>
<P><STRONG><a name="[1fb]"></a>geometry_msgs::Quaternion::Quaternion()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i._ZN13geometry_msgs10QuaternionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = geometry_msgs::Quaternion::Quaternion()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::tf::createQuaternionFromYaw(double)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::PoseWithCovariance()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TransformStamped::TransformStamped()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
</UL>

<P><STRONG><a name="[28e]"></a>geometry_msgs::Quaternion::Quaternion__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN13geometry_msgs10QuaternionC1Ev), UNUSED)

<P><STRONG><a name="[a3]"></a>geometry_msgs::TransformStamped::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs16TransformStamped6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs16TransformStampedE)
</UL>
<P><STRONG><a name="[a2]"></a>geometry_msgs::TransformStamped::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs16TransformStamped7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs16TransformStampedE)
</UL>
<P><STRONG><a name="[1ff]"></a>geometry_msgs::TransformStamped::TransformStamped()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs16TransformStampedC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = geometry_msgs::TransformStamped::TransformStamped() &rArr; std_msgs::Header::Header()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::Vector3()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::Quaternion()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[28f]"></a>geometry_msgs::TransformStamped::TransformStamped__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs16TransformStampedC1Ev), UNUSED)

<P><STRONG><a name="[a5]"></a>geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(i._ZN13geometry_msgs18PoseWithCovariance11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = geometry_msgs::PoseWithCovariance::deserialize(unsigned char*) &rArr; geometry_msgs::Pose::deserialize(unsigned char*) &rArr; geometry_msgs::Point::deserialize(unsigned char*) &rArr; ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Pose::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovarianceStamped::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs18PoseWithCovarianceE)
</UL>
<P><STRONG><a name="[a7]"></a>geometry_msgs::PoseWithCovariance::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs18PoseWithCovariance6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs18PoseWithCovarianceE)
</UL>
<P><STRONG><a name="[a6]"></a>geometry_msgs::PoseWithCovariance::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs18PoseWithCovariance7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs18PoseWithCovarianceE)
</UL>
<P><STRONG><a name="[200]"></a>geometry_msgs::PoseWithCovariance::PoseWithCovariance()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs18PoseWithCovarianceC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = geometry_msgs::PoseWithCovariance::PoseWithCovariance() &rArr; geometry_msgs::Quaternion::Quaternion()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::Quaternion()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::PoseWithCovarianceStamped&), int)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::Odometry()
</UL>

<P><STRONG><a name="[290]"></a>geometry_msgs::PoseWithCovariance::PoseWithCovariance__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs18PoseWithCovarianceC1Ev), UNUSED)

<P><STRONG><a name="[aa]"></a>geometry_msgs::TwistWithCovariance::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs19TwistWithCovariance6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs19TwistWithCovarianceE)
</UL>
<P><STRONG><a name="[a9]"></a>geometry_msgs::TwistWithCovariance::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs19TwistWithCovariance7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs19TwistWithCovarianceE)
</UL>
<P><STRONG><a name="[ac]"></a>geometry_msgs::PoseWithCovarianceStamped::deserialize(unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs25PoseWithCovarianceStamped11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = geometry_msgs::PoseWithCovarianceStamped::deserialize(unsigned char*) &rArr; geometry_msgs::PoseWithCovariance::deserialize(unsigned char*) &rArr; geometry_msgs::Pose::deserialize(unsigned char*) &rArr; geometry_msgs::Point::deserialize(unsigned char*) &rArr; ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::deserialize(unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::callback(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs25PoseWithCovarianceStampedE)
</UL>
<P><STRONG><a name="[ae]"></a>geometry_msgs::PoseWithCovarianceStamped::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs25PoseWithCovarianceStamped6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs25PoseWithCovarianceStampedE)
</UL>
<P><STRONG><a name="[ad]"></a>geometry_msgs::PoseWithCovarianceStamped::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs25PoseWithCovarianceStamped7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs25PoseWithCovarianceStampedE)
</UL>
<P><STRONG><a name="[b0]"></a>geometry_msgs::Pose::deserialize(unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs4Pose11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = geometry_msgs::Pose::deserialize(unsigned char*) &rArr; geometry_msgs::Point::deserialize(unsigned char*) &rArr; ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Point::deserialize(unsigned char*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs4PoseE)
</UL>
<P><STRONG><a name="[b2]"></a>geometry_msgs::Pose::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs4Pose6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs4PoseE)
</UL>
<P><STRONG><a name="[b1]"></a>geometry_msgs::Pose::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs4Pose7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs4PoseE)
</UL>
<P><STRONG><a name="[b4]"></a>geometry_msgs::Point::deserialize(unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs5Point11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = geometry_msgs::Point::deserialize(unsigned char*) &rArr; ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Pose::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs5PointE)
</UL>
<P><STRONG><a name="[b6]"></a>geometry_msgs::Point::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs5Point6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs5PointE)
</UL>
<P><STRONG><a name="[b5]"></a>geometry_msgs::Point::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs5Point7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs5PointE)
</UL>
<P><STRONG><a name="[b8]"></a>geometry_msgs::Twist::deserialize(unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs5Twist11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = geometry_msgs::Twist::deserialize(unsigned char*) &rArr; geometry_msgs::Vector3::deserialize(unsigned char*) &rArr; ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::callback(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[ba]"></a>geometry_msgs::Twist::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs5Twist6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[b9]"></a>geometry_msgs::Twist::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs5Twist7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[201]"></a>geometry_msgs::Twist::Twist()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i._ZN13geometry_msgs5TwistC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = geometry_msgs::Twist::Twist() &rArr; geometry_msgs::Vector3::Vector3()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::Odometry()
</UL>

<P><STRONG><a name="[291]"></a>geometry_msgs::Twist::Twist__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN13geometry_msgs5TwistC1Ev), UNUSED)

<P><STRONG><a name="[bc]"></a>geometry_msgs::Vector3::deserialize(unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i._ZN13geometry_msgs7Vector311deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = geometry_msgs::Vector3::deserialize(unsigned char*) &rArr; ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[be]"></a>geometry_msgs::Vector3::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs7Vector36getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[bd]"></a>geometry_msgs::Vector3::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs7Vector37getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[1fc]"></a>geometry_msgs::Vector3::Vector3()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i._ZN13geometry_msgs7Vector3C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = geometry_msgs::Vector3::Vector3()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::Twist()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TransformStamped::TransformStamped()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
</UL>

<P><STRONG><a name="[292]"></a>geometry_msgs::Vector3::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN13geometry_msgs7Vector3C1Ev), UNUSED)

<P><STRONG><a name="[c1]"></a>geometry_msgs::Transform::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs9Transform6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs9TransformE)
</UL>
<P><STRONG><a name="[c0]"></a>geometry_msgs::Transform::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13geometry_msgs9Transform7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs9TransformE)
</UL>
<P><STRONG><a name="[c3]"></a>rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, main.o(i._ZN14rosserial_msgs20RequestParamResponse11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::spinOnce()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[c5]"></a>rosserial_msgs::RequestParamResponse::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN14rosserial_msgs20RequestParamResponse6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[c4]"></a>rosserial_msgs::RequestParamResponse::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN14rosserial_msgs20RequestParamResponse7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[c8]"></a>rosserial_msgs::Log::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN14rosserial_msgs3Log6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs3LogE)
</UL>
<P><STRONG><a name="[c7]"></a>rosserial_msgs::Log::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN14rosserial_msgs3Log7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs3LogE)
</UL>
<P><STRONG><a name="[cb]"></a>rosserial_msgs::TopicInfo::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN14rosserial_msgs9TopicInfo6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
</UL>
<P><STRONG><a name="[ca]"></a>rosserial_msgs::TopicInfo::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN14rosserial_msgs9TopicInfo7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
</UL>
<P><STRONG><a name="[203]"></a>ArduinoHardware::time()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i._ZN15ArduinoHardware4timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoHardware::time()
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::syncTime(unsigned char*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::spinOnce()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::requestSyncTime()
</UL>

<P><STRONG><a name="[ce]"></a>turtlebot3_msgs::SensorState::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN15turtlebot3_msgs11SensorState6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN15turtlebot3_msgs11SensorStateE)
</UL>
<P><STRONG><a name="[cd]"></a>turtlebot3_msgs::SensorState::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN15turtlebot3_msgs11SensorState7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN15turtlebot3_msgs11SensorStateE)
</UL>
<P><STRONG><a name="[1e3]"></a>tf::TransformBroadcaster::sendTransform(geometry_msgs::TransformStamped&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i._ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tf::TransformBroadcaster::sendTransform(geometry_msgs::TransformStamped&) &rArr; ros::Publisher::publish(const ros::Msg*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::publish(const ros::Msg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishDriveInformation()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishImuMsg()
</UL>

<P><STRONG><a name="[d1]"></a>tf::tfMessage::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN2tf9tfMessage6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN2tf9tfMessageE)
</UL>
<P><STRONG><a name="[d0]"></a>tf::tfMessage::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN2tf9tfMessage7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN2tf9tfMessageE)
</UL>
<P><STRONG><a name="[247]"></a>ros::Subscriber_::Subscriber___sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN3ros11Subscriber_C2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::PoseWithCovarianceStamped&), int)
</UL>

<P><STRONG><a name="[271]"></a>ros::normalizeSecNSec(unsigned&, unsigned&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, time.o(i._ZN3ros16normalizeSecNSecERjS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::syncTime(unsigned char*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now()
</UL>

<P><STRONG><a name="[208]"></a>ros::Msg::serializeAvrFloat64(unsigned char*, float)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, main.o(i._ZN3ros3Msg19serializeAvrFloat64EPhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::serialize(unsigned char*) const
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Point::serialize(unsigned char*) const
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::serialize(unsigned char*) const
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::serialize(unsigned char*) const
</UL>

<P><STRONG><a name="[1fe]"></a>ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, main.o(i._ZN3ros3Msg21deserializeAvrFloat64EPKhPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::deserialize(unsigned char*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Point::deserialize(unsigned char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::deserialize(unsigned char*)
</UL>

<P><STRONG><a name="[1f9]"></a>ros::Msg::Msg__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN3ros3MsgC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::NodeHandle_()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::log(char, const char*)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::negotiateTopics()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::PoseWithCovarianceStamped&), int)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::Odometry()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::Vector3()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::Twist()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::PoseWithCovariance()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TransformStamped::TransformStamped()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::Quaternion()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
</UL>

<P><STRONG><a name="[22b]"></a>ros::Time::Time()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._ZN3ros4TimeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
</UL>

<P><STRONG><a name="[293]"></a>ros::Time::Time__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN3ros4TimeC1Ev), UNUSED)

<P><STRONG><a name="[1e2]"></a>ros::Publisher::publish(const ros::Msg*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i._ZN3ros9Publisher7publishEPKNS_3MsgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ros::Publisher::publish(const ros::Msg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf::TransformBroadcaster::sendTransform(geometry_msgs::TransformStamped&)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishDriveInformation()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishSensorStateMsg()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishImuMsg()
</UL>

<P><STRONG><a name="[249]"></a>ros::Publisher::Publisher(const char*, ros::Msg*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._ZN3ros9PublisherC1EPKcPNS_3MsgEi))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[294]"></a>ros::Publisher::Publisher__sub_object(const char*, ros::Msg*, int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN3ros9PublisherC1EPKcPNS_3MsgEi), UNUSED)

<P><STRONG><a name="[210]"></a>cIMU::computeIMU()</STRONG> (Thumb, 748 bytes, Stack size 48 bytes, imu.o(i._ZN4cIMU10computeIMUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = cIMU::computeIMU() &rArr; Madgwick::updateIMU(float, float, float, float, float, float) &rArr; Madgwick::invSqrt(float) &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::gyro_get_adc()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::mag_get_adc()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::acc_get_adc()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::updateIMU(float, float, float, float, float, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::computeAngles()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::update(unsigned)
</UL>

<P><STRONG><a name="[219]"></a>cIMU::begin(unsigned)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, imu.o(i._ZN4cIMU5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = cIMU::begin(unsigned) &rArr; cIMU::update(unsigned) &rArr; cIMU::computeIMU() &rArr; Madgwick::updateIMU(float, float, float, float, float, float) &rArr; Madgwick::invSqrt(float) &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::gyro_cali_get_done()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::update(unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f7]"></a>cIMU::update(unsigned)</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, imu.o(i._ZN4cIMU6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = cIMU::update(unsigned) &rArr; cIMU::computeIMU() &rArr; Madgwick::updateIMU(float, float, float, float, float, float) &rArr; Madgwick::invSqrt(float) &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::begin(unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[21c]"></a>cIMU::cIMU()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, imu.o(i._ZN4cIMUC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cIMU::cIMU()
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::cMPU9250()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::Madgwick()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[295]"></a>cIMU::cIMU__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, imu.o(i._ZN4cIMUC1Ev), UNUSED)

<P><STRONG><a name="[1d9]"></a>CMotor::controller()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmotor.o(i._ZN6CMotor10controllerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CMotor::controller() &rArr; PID_controller(MOTOR_PID*) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_controller(MOTOR_PID*)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Handle()
</UL>

<P><STRONG><a name="[1f0]"></a>CMotor::readEncoder(int&, int&, int&)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cmotor.o(i._ZN6CMotor11readEncoderERiS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMotor::readEncoder(int&, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishSensorStateMsg()
</UL>

<P><STRONG><a name="[1d8]"></a>CMotor::FeedbackSpeed(double, double, double)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, cmotor.o(i._ZN6CMotor13FeedbackSpeedEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMotor::FeedbackSpeed(double, double, double)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Handle()
</UL>

<P><STRONG><a name="[266]"></a>CMotor::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmotor.o(i._ZN6CMotor4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d7]"></a>CMotor::setSpeed(double, double, double)</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, cmotor.o(i._ZN6CMotor8setSpeedEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CMotor::setSpeed(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Handle()
</UL>

<P><STRONG><a name="[24b]"></a>CMotor::CMotor()</STRONG> (Thumb, 370 bytes, Stack size 0 bytes, cmotor.o(i._ZN6CMotorC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[296]"></a>CMotor::CMotor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cmotor.o(i._ZN6CMotorC1Ev), UNUSED)

<P><STRONG><a name="[8f]"></a>CMotor::~CMotor()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmotor.o(i._ZN6CMotorD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_ttt_mp)
</UL>
<P><STRONG><a name="[297]"></a>CMotor::~CMotor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cmotor.o(i._ZN6CMotorD1Ev), UNUSED)

<P><STRONG><a name="[24c]"></a>CSonar::CSonar()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, csonar.o(i._ZN6CSonarC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[298]"></a>CSonar::CSonar__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, csonar.o(i._ZN6CSonarC1Ev), UNUSED)

<P><STRONG><a name="[90]"></a>CSonar::~CSonar()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, csonar.o(i._ZN6CSonarD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_ttt_mp)
</UL>
<P><STRONG><a name="[299]"></a>CSonar::~CSonar__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, csonar.o(i._ZN6CSonarD1Ev), UNUSED)

<P><STRONG><a name="[269]"></a>CKalman::setMeasureNoise_R(double)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN7CKalman17setMeasureNoise_REd))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1eb]"></a>CKalman::update(float)</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, ckalman.o(i._ZN7CKalman6updateEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CKalman::update(float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
</UL>

<P><STRONG><a name="[24a]"></a>CKalman::CKalman()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ckalman.o(i._ZN7CKalmanC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[29a]"></a>CKalman::CKalman__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ckalman.o(i._ZN7CKalmanC1Ev), UNUSED)

<P><STRONG><a name="[8e]"></a>CKalman::~CKalman()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ckalman.o(i._ZN7CKalmanD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_ttt_mp)
</UL>
<P><STRONG><a name="[29b]"></a>CKalman::~CKalman__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ckalman.o(i._ZN7CKalmanD1Ev), UNUSED)

<P><STRONG><a name="[217]"></a>Madgwick::computeAngles()</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, madgwickahrs.o(i._ZN8Madgwick13computeAnglesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Madgwick::computeAngles() &rArr; asinf &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[220]"></a>Madgwick::invSqrt(float)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, madgwickahrs.o(i._ZN8Madgwick7invSqrtEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Madgwick::invSqrt(float) &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::updateIMU(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[216]"></a>Madgwick::updateIMU(float, float, float, float, float, float)</STRONG> (Thumb, 1644 bytes, Stack size 168 bytes, madgwickahrs.o(i._ZN8Madgwick9updateIMUEffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Madgwick::updateIMU(float, float, float, float, float, float) &rArr; Madgwick::invSqrt(float) &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::invSqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[21e]"></a>Madgwick::Madgwick()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, madgwickahrs.o(i._ZN8MadgwickC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::cIMU()
</UL>

<P><STRONG><a name="[29c]"></a>Madgwick::Madgwick__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, madgwickahrs.o(i._ZN8MadgwickC1Ev), UNUSED)

<P><STRONG><a name="[245]"></a>SPIClass::SPIClass(SPI_TypeDef*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(i._ZN8SPIClassC1EP11SPI_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_SPI
</UL>

<P><STRONG><a name="[29d]"></a>SPIClass::SPIClass__sub_object(SPI_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, spi.o(i._ZN8SPIClassC1EP11SPI_TypeDef), UNUSED)

<P><STRONG><a name="[222]"></a>cMPU9250::acc_common()</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, mpu9250.o(i._ZN8cMPU925010acc_commonEv))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::acc_get_adc()
</UL>

<P><STRONG><a name="[223]"></a>cMPU9250::mag_common()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpu9250.o(i._ZN8cMPU925010mag_commonEv))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::mag_get_adc()
</UL>

<P><STRONG><a name="[213]"></a>cMPU9250::acc_get_adc()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mpu9250.o(i._ZN8cMPU925011acc_get_adcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cMPU9250::acc_get_adc() &rArr; MPU_Get_Accelerometer &rArr; MPU_Read_Len &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::acc_common()
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[224]"></a>cMPU9250::gyro_common()</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, mpu9250.o(i._ZN8cMPU925011gyro_commonEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cMPU9250::gyro_common()
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::gyro_get_adc()
</UL>

<P><STRONG><a name="[215]"></a>cMPU9250::mag_get_adc()</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, mpu9250.o(i._ZN8cMPU925011mag_get_adcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cMPU9250::mag_get_adc()
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::mag_common()
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[214]"></a>cMPU9250::gyro_get_adc()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mpu9250.o(i._ZN8cMPU925012gyro_get_adcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cMPU9250::gyro_get_adc() &rArr; MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::gyro_common()
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[21b]"></a>cMPU9250::gyro_cali_get_done()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mpu9250.o(i._ZN8cMPU925018gyro_cali_get_doneEv))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::begin(unsigned)
</UL>

<P><STRONG><a name="[225]"></a>cMPU9250::init()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mpu9250.o(i._ZN8cMPU92504initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cMPU9250::init() &rArr; MPU9250_Init &rArr; MPU_Set_Rate &rArr; MPU_Set_LPF(unsigned short) &rArr; MPU_Write_Byte &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::begin()
</UL>

<P><STRONG><a name="[21a]"></a>cMPU9250::begin()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mpu9250.o(i._ZN8cMPU92505beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cMPU9250::begin() &rArr; cMPU9250::init() &rArr; MPU9250_Init &rArr; MPU_Set_Rate &rArr; MPU_Set_LPF(unsigned short) &rArr; MPU_Write_Byte &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::gyro_init()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::mag_init()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::acc_init()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::begin(unsigned)
</UL>

<P><STRONG><a name="[227]"></a>cMPU9250::acc_init()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mpu9250.o(i._ZN8cMPU92508acc_initEv))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::begin()
</UL>

<P><STRONG><a name="[228]"></a>cMPU9250::mag_init()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mpu9250.o(i._ZN8cMPU92508mag_initEv))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::begin()
</UL>

<P><STRONG><a name="[226]"></a>cMPU9250::gyro_init()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mpu9250.o(i._ZN8cMPU92509gyro_initEv))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMPU9250::begin()
</UL>

<P><STRONG><a name="[21d]"></a>cMPU9250::cMPU9250()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mpu9250.o(i._ZN8cMPU9250C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::cIMU()
</UL>

<P><STRONG><a name="[29e]"></a>cMPU9250::cMPU9250__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mpu9250.o(i._ZN8cMPU9250C1Ev), UNUSED)

<P><STRONG><a name="[de]"></a>nav_msgs::Odometry::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN8nav_msgs8Odometry6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8nav_msgs8OdometryE)
</UL>
<P><STRONG><a name="[dd]"></a>nav_msgs::Odometry::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN8nav_msgs8Odometry7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8nav_msgs8OdometryE)
</UL>
<P><STRONG><a name="[229]"></a>nav_msgs::Odometry::Odometry()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i._ZN8nav_msgs8OdometryC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nav_msgs::Odometry::Odometry() &rArr; geometry_msgs::PoseWithCovariance::PoseWithCovariance() &rArr; geometry_msgs::Quaternion::Quaternion()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::Twist()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::PoseWithCovariance()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[29f]"></a>nav_msgs::Odometry::Odometry__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN8nav_msgs8OdometryC1Ev), UNUSED)

<P><STRONG><a name="[e0]"></a>std_msgs::Time::deserialize(unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i._ZN8std_msgs4Time11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std_msgs::Time::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::syncTime(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[e2]"></a>std_msgs::Time::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN8std_msgs4Time6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[e1]"></a>std_msgs::Time::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN8std_msgs4Time7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[22a]"></a>std_msgs::Time::Time()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i._ZN8std_msgs4TimeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std_msgs::Time::Time()
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Time::Time()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::syncTime(unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::requestSyncTime()
</UL>

<P><STRONG><a name="[2a0]"></a>std_msgs::Time::Time__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN8std_msgs4TimeC1Ev), UNUSED)

<P><STRONG><a name="[e4]"></a>std_msgs::Header::deserialize(unsigned char*)</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, main.o(i._ZN8std_msgs6Header11deserializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std_msgs::Header::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovarianceStamped::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8std_msgs6HeaderE)
</UL>
<P><STRONG><a name="[e6]"></a>std_msgs::Header::getMD5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN8std_msgs6Header6getMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8std_msgs6HeaderE)
</UL>
<P><STRONG><a name="[e5]"></a>std_msgs::Header::getType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN8std_msgs6Header7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8std_msgs6HeaderE)
</UL>
<P><STRONG><a name="[1fa]"></a>std_msgs::Header::Header()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i._ZN8std_msgs6HeaderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std_msgs::Header::Header()
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Time::Time()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::PoseWithCovarianceStamped&), int)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::Odometry()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TransformStamped::TransformStamped()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
</UL>

<P><STRONG><a name="[2a1]"></a>std_msgs::Header::Header__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN8std_msgs6HeaderC1Ev), UNUSED)

<P><STRONG><a name="[1d4]"></a>UARTClass::RxHandler()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uartclass.o(i._ZN9UARTClass9RxHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_start_rx
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx2_Handler()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx1_Handler()
</UL>

<P><STRONG><a name="[97]"></a>UARTClass::available()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uartclass.o(i._ZN9UARTClass9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTClass::available()
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_get_mode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartclass.o(.constdata__ZTV9UARTClass)
</UL>
<P><STRONG><a name="[230]"></a>UARTClass::UARTClass(unsigned char, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uartclass.o(i._ZN9UARTClassC1Ehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTClass::UARTClass(unsigned char, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_drv_uart_c_81d51d31
</UL>

<P><STRONG><a name="[2a2]"></a>UARTClass::UARTClass__sub_object(unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uartclass.o(i._ZN9UARTClassC1Ehh), UNUSED)

<P><STRONG><a name="[98]"></a>USBSerial::read()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbserial.o(i._ZN9USBSerial4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBSerial::read() &rArr; vcp_getch &rArr; CDC_Itf_Getch()
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_is_available
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_getch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
</UL>
<P><STRONG><a name="[264]"></a>USBSerial::begin(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbserial.o(i._ZN9USBSerial5beginEj))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>USBSerial::write(const unsigned char*, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbserial.o(i._ZN9USBSerial5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBSerial::write(const unsigned char*, unsigned) &rArr; vcp_write &rArr; CDC_Itf_Write(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
</UL>
<P><STRONG><a name="[24d]"></a>USBSerial::USBSerial()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbserial.o(i._ZN9USBSerialC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[2a3]"></a>USBSerial::USBSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usbserial.o(i._ZN9USBSerialC1Ev), UNUSED)

<P><STRONG><a name="[9a]"></a>sensor_msgs::Imu::serialize(unsigned char*) const</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, main.o(i._ZNK11sensor_msgs3Imu9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_msgs::Imu::serialize(unsigned char*) const &rArr; geometry_msgs::Vector3::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::serialize(unsigned char*) const
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::serialize(unsigned char*) const
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN11sensor_msgs3ImuE)
</UL>
<P><STRONG><a name="[9d]"></a>geometry_msgs::Quaternion::serialize(unsigned char*) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i._ZNK13geometry_msgs10Quaternion9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = geometry_msgs::Quaternion::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Transform::serialize(unsigned char*) const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Pose::serialize(unsigned char*) const
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs10QuaternionE)
</UL>
<P><STRONG><a name="[a1]"></a>geometry_msgs::TransformStamped::serialize(unsigned char*) const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, main.o(i._ZNK13geometry_msgs16TransformStamped9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = geometry_msgs::TransformStamped::serialize(unsigned char*) const &rArr; geometry_msgs::Transform::serialize(unsigned char*) const &rArr; geometry_msgs::Vector3::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Transform::serialize(unsigned char*) const
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs16TransformStampedE)
</UL>
<P><STRONG><a name="[a4]"></a>geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(i._ZNK13geometry_msgs18PoseWithCovariance9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const &rArr; geometry_msgs::Pose::serialize(unsigned char*) const &rArr; geometry_msgs::Point::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Pose::serialize(unsigned char*) const
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::serialize(unsigned char*) const
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovarianceStamped::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs18PoseWithCovarianceE)
</UL>
<P><STRONG><a name="[a8]"></a>geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(i._ZNK13geometry_msgs19TwistWithCovariance9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const &rArr; geometry_msgs::Twist::serialize(unsigned char*) const &rArr; geometry_msgs::Vector3::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::serialize(unsigned char*) const
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs19TwistWithCovarianceE)
</UL>
<P><STRONG><a name="[ab]"></a>geometry_msgs::PoseWithCovarianceStamped::serialize(unsigned char*) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._ZNK13geometry_msgs25PoseWithCovarianceStamped9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = geometry_msgs::PoseWithCovarianceStamped::serialize(unsigned char*) const &rArr; geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const &rArr; geometry_msgs::Pose::serialize(unsigned char*) const &rArr; geometry_msgs::Point::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs25PoseWithCovarianceStampedE)
</UL>
<P><STRONG><a name="[af]"></a>geometry_msgs::Pose::serialize(unsigned char*) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._ZNK13geometry_msgs4Pose9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = geometry_msgs::Pose::serialize(unsigned char*) const &rArr; geometry_msgs::Point::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Point::serialize(unsigned char*) const
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::serialize(unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs4PoseE)
</UL>
<P><STRONG><a name="[b3]"></a>geometry_msgs::Point::serialize(unsigned char*) const</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i._ZNK13geometry_msgs5Point9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = geometry_msgs::Point::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Pose::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs5PointE)
</UL>
<P><STRONG><a name="[b7]"></a>geometry_msgs::Twist::serialize(unsigned char*) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._ZNK13geometry_msgs5Twist9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = geometry_msgs::Twist::serialize(unsigned char*) const &rArr; geometry_msgs::Vector3::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::serialize(unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs5TwistE)
</UL>
<P><STRONG><a name="[bb]"></a>geometry_msgs::Vector3::serialize(unsigned char*) const</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i._ZNK13geometry_msgs7Vector39serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = geometry_msgs::Vector3::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Transform::serialize(unsigned char*) const
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::serialize(unsigned char*) const
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs7Vector3E)
</UL>
<P><STRONG><a name="[bf]"></a>geometry_msgs::Transform::serialize(unsigned char*) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._ZNK13geometry_msgs9Transform9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = geometry_msgs::Transform::serialize(unsigned char*) const &rArr; geometry_msgs::Vector3::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Vector3::serialize(unsigned char*) const
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::serialize(unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TransformStamped::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN13geometry_msgs9TransformE)
</UL>
<P><STRONG><a name="[c2]"></a>rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, main.o(i._ZNK14rosserial_msgs20RequestParamResponse9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs20RequestParamResponseE)
</UL>
<P><STRONG><a name="[c6]"></a>rosserial_msgs::Log::serialize(unsigned char*) const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i._ZNK14rosserial_msgs3Log9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rosserial_msgs::Log::serialize(unsigned char*) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs3LogE)
</UL>
<P><STRONG><a name="[c9]"></a>rosserial_msgs::TopicInfo::serialize(unsigned char*) const</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, main.o(i._ZNK14rosserial_msgs9TopicInfo9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rosserial_msgs::TopicInfo::serialize(unsigned char*) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN14rosserial_msgs9TopicInfoE)
</UL>
<P><STRONG><a name="[cc]"></a>turtlebot3_msgs::SensorState::serialize(unsigned char*) const</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, main.o(i._ZNK15turtlebot3_msgs11SensorState9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = turtlebot3_msgs::SensorState::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN15turtlebot3_msgs11SensorStateE)
</UL>
<P><STRONG><a name="[cf]"></a>tf::tfMessage::serialize(unsigned char*) const</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(i._ZNK2tf9tfMessage9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tf::tfMessage::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN2tf9tfMessageE)
</UL>
<P><STRONG><a name="[dc]"></a>nav_msgs::Odometry::serialize(unsigned char*) const</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(i._ZNK8nav_msgs8Odometry9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nav_msgs::Odometry::serialize(unsigned char*) const &rArr; geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const &rArr; geometry_msgs::Twist::serialize(unsigned char*) const &rArr; geometry_msgs::Vector3::serialize(unsigned char*) const &rArr; ros::Msg::serializeAvrFloat64(unsigned char*, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::serialize(unsigned char*) const
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8nav_msgs8OdometryE)
</UL>
<P><STRONG><a name="[df]"></a>std_msgs::Time::serialize(unsigned char*) const</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i._ZNK8std_msgs4Time9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std_msgs::Time::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8std_msgs4TimeE)
</UL>
<P><STRONG><a name="[e3]"></a>std_msgs::Header::serialize(unsigned char*) const</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, main.o(i._ZNK8std_msgs6Header9serializeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std_msgs::Header::serialize(unsigned char*) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::serialize(unsigned char*) const
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovarianceStamped::serialize(unsigned char*) const
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TransformStamped::serialize(unsigned char*) const
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::serialize(unsigned char*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN8std_msgs6HeaderE)
</UL>
<P><STRONG><a name="[23b]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[24f]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[211]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[96]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 5]<UL><LI> usbserial.o(.constdata__ZTV5Print)
<LI> usbserial.o(.constdata__ZTV6Stream)
<LI> main.o(.constdata__ZTVN3ros3MsgE)
<LI> main.o(.constdata__ZTVN3ros15NodeHandleBase_E)
<LI> main.o(.constdata__ZTVN3ros11Subscriber_E)
</UL>
<P><STRONG><a name="[10d]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[236]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[238]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[239]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[23a]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[f4]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[23e]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[23f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[23c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[240]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[242]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[243]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[244]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[2a4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2a5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[250]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[21f]"></a>asinf</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, asinf.o(i.asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = asinf &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::computeAngles()
</UL>

<P><STRONG><a name="[1ea]"></a>atan2f</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = atan2f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoseCallback(const geometry_msgs::PoseWithCovarianceStamped&)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::computeAngles()
</UL>

<P><STRONG><a name="[251]"></a>attachInterrupt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_exti.o(i.attachInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = attachInterrupt &rArr; [local to drv_exti_c]::drv_exti_attach(unsigned, void(*)(), unsigned) &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to drv_exti_c]::drv_exti_attach(unsigned, void(*)(), unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[252]"></a>bsp_init</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bsp_init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_c]::SCB_EnableDCache()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::tf::createQuaternionFromYaw(double)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
</UL>

<P><STRONG><a name="[254]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[19c]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[192]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[112]"></a>digitalRead</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_pin.o(i.digitalRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = digitalRead
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_and_Direction
</UL>

<P><STRONG><a name="[258]"></a>drv_Led_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_led.o(i.drv_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_Led_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[267]"></a>drv_exti_init</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, drv_exti.o(i.drv_exti_init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[259]"></a>drv_micros_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_micros.o(i.drv_micros_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = drv_micros_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>drv_motor_pwm_init</STRONG> (Thumb, 476 bytes, Stack size 8 bytes, drv_motor.o(i.drv_motor_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_motor_pwm_init &rArr; HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>drv_pwm_set_duty</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, drv_motor.o(i.drv_pwm_set_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = drv_pwm_set_duty &rArr; HAL_TIM_PWM_ConfigChannel &rArr; [local to stm32f7xx_hal_tim_ex_c]::TIM_OC6_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map(long, long, long, long, long)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_controller(MOTOR_PID*)
</UL>

<P><STRONG><a name="[262]"></a>drv_spi_init</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, drv_spi.o(i.drv_spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26c]"></a>drv_timer_attachInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_timer.o(i.drv_timer_attachInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26a]"></a>drv_timer_init</STRONG> (Thumb, 962 bytes, Stack size 8 bytes, drv_timer.o(i.drv_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d]"></a>drv_timer_pause</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_timer.o(i.drv_timer_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv_timer_pause &rArr; HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25e]"></a>drv_timer_resume</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, drv_timer.o(i.drv_timer_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = drv_timer_resume &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26b]"></a>drv_timer_set_period</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, drv_timer.o(i.drv_timer_set_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_timer_set_period
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22f]"></a>drv_uart_available</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drv_uart.o(i.drv_uart_available))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClass::available()
</UL>

<P><STRONG><a name="[185]"></a>drv_uart_err_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart.o(i.drv_uart_err_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = drv_uart_err_handler &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_start_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[22e]"></a>drv_uart_get_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_uart.o(i.drv_uart_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClass::available()
</UL>

<P><STRONG><a name="[261]"></a>drv_uart_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_uart.o(i.drv_uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22c]"></a>drv_uart_read_buf</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, drv_uart.o(i.drv_uart_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = drv_uart_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClass::RxHandler()
</UL>

<P><STRONG><a name="[22d]"></a>drv_uart_start_rx</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_uart.o(i.drv_uart_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClass::RxHandler()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_err_handler
</UL>

<P><STRONG><a name="[85]"></a>main</STRONG> (Thumb, 448 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = main &rArr; loop() &rArr; publishDriveInformation() &rArr; updateOdometry(double) &rArr; [local to main_cpp]::tf::createQuaternionFromYaw(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timer_set_period
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timer_resume
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timer_pause
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timer_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_timer_attachInterrupt
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_motor_pwm_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_micros_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_exti_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_Led_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attachInterrupt
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::begin(unsigned)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotor::Init()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::begin(unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::advertise(ros::Publisher&)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKalman::setMeasureNoise_R(double)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[212]"></a>micros</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_micros.o(i.micros))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::update(unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::computeIMU()
</UL>

<P><STRONG><a name="[1a6]"></a>osSystickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.osSystickHandler))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[268]"></a>pinMode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, drv_pin.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[202]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)
</UL>

<P><STRONG><a name="[1ec]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::tf::createQuaternionFromYaw(double)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
</UL>

<P><STRONG><a name="[1f2]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandVelocityCallback(const geometry_msgs::Twist&)
</UL>

<P><STRONG><a name="[24e]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[232]"></a>vcp_getch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vcp.o(i.vcp_getch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vcp_getch &rArr; CDC_Itf_Getch()
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_Getch()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::read()
</UL>

<P><STRONG><a name="[231]"></a>vcp_is_available</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vcp.o(i.vcp_is_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vcp_is_available
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_Available()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::read()
</UL>

<P><STRONG><a name="[233]"></a>vcp_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vcp.o(i.vcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vcp_write &rArr; CDC_Itf_Write(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_Write(unsigned char*, unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[20e]"></a>wdg_setup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wdg.o(i.wdg_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wdg_setup &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_interface_c]::CDC_Itf_Receive(unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[20f]"></a>wdg_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wdg.o(i.wdg_start))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_cdc_interface_c]::CDC_Itf_Receive(unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[d4]"></a>ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::getMsgType()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvE10getMsgTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEE)
</UL>
<P><STRONG><a name="[d3]"></a>ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::getEndpointType()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvE15getEndpointTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEE)
</UL>
<P><STRONG><a name="[d2]"></a>ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::callback(unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvE8callbackEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::callback(unsigned char*) &rArr; geometry_msgs::PoseWithCovarianceStamped::deserialize(unsigned char*) &rArr; geometry_msgs::PoseWithCovariance::deserialize(unsigned char*) &rArr; geometry_msgs::Pose::deserialize(unsigned char*) &rArr; geometry_msgs::Point::deserialize(unsigned char*) &rArr; ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovarianceStamped::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEE)
</UL>
<P><STRONG><a name="[d5]"></a>ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::getMsgMD5()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvE9getMsgMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEE)
</UL>
<P><STRONG><a name="[248]"></a>ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::PoseWithCovarianceStamped&), int)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEC1EPKcPFvRKS2_Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::PoseWithCovarianceStamped&), int) &rArr; geometry_msgs::PoseWithCovariance::PoseWithCovariance() &rArr; geometry_msgs::Quaternion::Quaternion()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Header::Header()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber_::Subscriber___sub_object()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::PoseWithCovariance::PoseWithCovariance()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[2a7]"></a>ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::Subscriber__sub_object(const char*, void(*)(const geometry_msgs::PoseWithCovarianceStamped&), int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedEvEC1EPKcPFvRKS2_Ei), UNUSED)

<P><STRONG><a name="[d8]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getMsgType()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
</UL>
<P><STRONG><a name="[d7]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getEndpointType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
</UL>
<P><STRONG><a name="[d6]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::callback(unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::callback(unsigned char*) &rArr; geometry_msgs::Twist::deserialize(unsigned char*) &rArr; geometry_msgs::Vector3::deserialize(unsigned char*) &rArr; ros::Msg::deserializeAvrFloat64(const unsigned char*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::deserialize(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
</UL>
<P><STRONG><a name="[d9]"></a>ros::Subscriber&lang;geometry_msgs::Twist, void&rang;::getMsgMD5()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(t._ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros10SubscriberIN13geometry_msgs5TwistEvEE)
</UL>
<P><STRONG><a name="[26e]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::negotiateTopics()</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::negotiateTopics()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::spinOnce()
</UL>

<P><STRONG><a name="[26f]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::requestSyncTime()</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::requestSyncTime() &rArr; std_msgs::Time::Time()
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoHardware::time()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::spinOnce()
</UL>

<P><STRONG><a name="[270]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::log(char, const char*)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE3logEcPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::log(char, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::publish(int, const ros::Msg*)
</UL>

<P><STRONG><a name="[1e1]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now()</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE3nowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::now() &rArr; ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::normalizeSecNSec(unsigned&, unsigned&)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Time::Time()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoHardware::time()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishDriveInformation()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishSensorStateMsg()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publishImuMsg()
</UL>

<P><STRONG><a name="[da]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::publish(int, const ros::Msg*)</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::publish(int, const ros::Msg*) &rArr; ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::log(char, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::log(char, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EEE)
</UL>
<P><STRONG><a name="[db]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::spinOnce()</STRONG> (Thumb, 630 bytes, Stack size 16 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::spinOnce() &rArr; rosserial_msgs::RequestParamResponse::deserialize(unsigned char*) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::syncTime(unsigned char*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::requestSyncTime()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::negotiateTopics()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoHardware::time()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EEE)
</UL>
<P><STRONG><a name="[272]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::syncTime(unsigned char*)</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::syncTime(unsigned char*) &rArr; ros::normalizeSecNSec(unsigned&, unsigned&)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::normalizeSecNSec(unsigned&, unsigned&)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::Time()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_msgs::Time::deserialize(unsigned char*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoHardware::time()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::spinOnce()
</UL>

<P><STRONG><a name="[265]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::advertise(ros::Publisher&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[246]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::NodeHandle_()</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::NodeHandle_()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ttt_mp
</UL>

<P><STRONG><a name="[2a8]"></a>ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::NodeHandle___sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(t._ZN3ros11NodeHandle_I15ArduinoHardwareLi25ELi25ELi1024ELi1024EEC1Ev), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ee]"></a>[local to main_cpp]::tf::createQuaternionFromYaw(double)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, main.o(i._ZN27_INTERNAL_8_main_cpp_ttt_mp2tf23createQuaternionFromYawEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = [local to main_cpp]::tf::createQuaternionFromYaw(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Quaternion::Quaternion()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOdometry(double)
</UL>

<P><STRONG><a name="[e7]"></a>__sti___8_main_cpp_ttt_mp</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, main.o(i.__sti___8_main_cpp_ttt_mp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __sti___8_main_cpp_ttt_mp &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::USBSerial()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKalman::CKalman()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSonar::CSonar()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotor::CMotor()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cIMU::cIMU()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robot_serial::robot_serial()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::NodeHandle_&lang;ArduinoHardware, (int)25, (int)25, (int)1024, (int)1024&rang;::NodeHandle_()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber&lang;geometry_msgs::PoseWithCovarianceStamped, void&rang;::Subscriber(const char*, void(*)(const geometry_msgs::PoseWithCovarianceStamped&), int)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nav_msgs::Odometry::Odometry()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Publisher::Publisher(const char*, ros::Msg*, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Time::Time()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Msg::Msg__sub_object()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros::Subscriber_::Subscriber___sub_object()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::Twist::Twist()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geometry_msgs::TransformStamped::TransformStamped()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_msgs::Imu::Imu()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[253]"></a>[local to bsp_c]::SCB_EnableDCache()</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, bsp.o(i._ZN26_INTERNAL_5_bsp_c_bsp_init16SCB_EnableDCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to bsp_c]::SCB_EnableDCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[e8]"></a>__sti___10_drv_uart_c_81d51d31</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_uart.o(i.__sti___10_drv_uart_c_81d51d31))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___10_drv_uart_c_81d51d31 &rArr; UARTClass::UARTClass(unsigned char, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClass::UARTClass(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.init_array)
</UL>
<P><STRONG><a name="[204]"></a>[local to drv_exti_c]::drv_exti_attach(unsigned, void(*)(), unsigned)</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, drv_exti.o(i._ZN32_INTERNAL_10_drv_exti_c_54292b4215drv_exti_attachEjPFYvvEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to drv_exti_c]::drv_exti_attach(unsigned, void(*)(), unsigned) &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attachInterrupt
</UL>

<P><STRONG><a name="[123]"></a>[local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f7xx_hal_cortex_c_2992dbc016NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f7xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[122]"></a>[local to stm32f7xx_hal_cortex_c]::NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f7xx_hal_cortex_c_2992dbc024NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[117]"></a>[local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f7xx_hal_dma_c_c25f65ec13DMA_SetConfigEP19__DMA_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[8b]"></a>[local to stm32f7xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to stm32f7xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*) &rArr; HAL_UART_ErrorCallback &rArr; drv_uart_err_handler &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_EndTxTransfer(UART_HandleTypeDef*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_EndRxTransfer(UART_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[187]"></a>[local to stm32f7xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f15UART_Receive_ITEP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to stm32f7xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; Rx2_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18a]"></a>[local to stm32f7xx_hal_uart_c]::UART_Transmit_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f16UART_Transmit_ITEP18UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>[local to stm32f7xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f7xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[188]"></a>[local to stm32f7xx_hal_uart_c]::UART_EndRxTransfer(UART_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f18UART_EndRxTransferEP18UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[20a]"></a>[local to stm32f7xx_hal_uart_c]::UART_EndTxTransfer(UART_HandleTypeDef*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f18UART_EndTxTransferEP18UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f7xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[89]"></a>[local to stm32f7xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to stm32f7xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; Rx2_Handler() &rArr; UARTClass::RxHandler() &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[18b]"></a>[local to stm32f7xx_hal_uart_c]::UART_EndTransmit_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f19UART_EndTransmit_ITEP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f7xx_hal_uart_c]::UART_EndTransmit_IT(UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>[local to stm32f7xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f7xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to stm32f7xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*) &rArr; HAL_UART_ErrorCallback &rArr; drv_uart_err_handler &rArr; drv_uart_start_rx &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f7xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[141]"></a>[local to stm32f7xx_hal_pcd_c]::PCD_WriteEmptyTxFifo(PCD_HandleTypeDef*, unsigned)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stm32f7xx_hal_pcd.o(i._ZN41_INTERNAL_19_stm32f7xx_hal_pcd_c_3a5cb0d320PCD_WriteEmptyTxFifoEP17PCD_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = [local to stm32f7xx_hal_pcd_c]::PCD_WriteEmptyTxFifo(PCD_HandleTypeDef*, unsigned) &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>[local to stm32f7xx_hal_tim_ex_c]::TIM_OC5_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i._ZN44_INTERNAL_22_stm32f7xx_hal_tim_ex_c_e8ef392017TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f7xx_hal_tim_ex_c]::TIM_OC5_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[17f]"></a>[local to stm32f7xx_hal_tim_ex_c]::TIM_OC6_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i._ZN44_INTERNAL_22_stm32f7xx_hal_tim_ex_c_e8ef392017TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f7xx_hal_tim_ex_c]::TIM_OC6_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1d0]"></a>[local to stm32f7xx_ll_usb_c]::USB_CoreReset(USB_OTG_GlobalTypeDef*)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i._ZN40_INTERNAL_18_stm32f7xx_ll_usb_c_832330cf13USB_CoreResetEP21USB_OTG_GlobalTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[e9]"></a>__sti___7_SPI_cpp_SPI</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi.o(i.__sti___7_SPI_cpp_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___7_SPI_cpp_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPIClass(SPI_TypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[9]"></a>[local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC13USBD_CDC_InitEP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char) &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>[local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC14USBD_CDC_SetupEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>[local to usbd_cdc_c]::USBD_CDC_DataIn(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC15USBD_CDC_DataInEP19_USBD_HandleTypeDefh))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>[local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC15USBD_CDC_DeInitEP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char) &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>[local to usbd_cdc_c]::USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC16USBD_CDC_DataOutEP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char) &rArr; USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>[local to usbd_cdc_c]::USBD_CDC_EP0_RxReady(_USBD_HandleTypeDef*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC20USBD_CDC_EP0_RxReadyEP19_USBD_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to usbd_cdc_c]::USBD_CDC_EP0_RxReady(_USBD_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>[local to usbd_cdc_c]::USBD_CDC_GetFSCfgDesc(unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC21USBD_CDC_GetFSCfgDescEPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>[local to usbd_cdc_c]::USBD_CDC_GetHSCfgDesc(unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC21USBD_CDC_GetHSCfgDescEPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>[local to usbd_cdc_c]::USBD_CDC_GetOtherSpeedCfgDesc(unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i._ZN32_INTERNAL_10_usbd_cdc_c_USBD_CDC29USBD_CDC_GetOtherSpeedCfgDescEPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>[local to usbd_cdc_interface_c]::CDC_Itf_Init()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usbd_cdc_interface.o(i._ZN42_INTERNAL_20_usbd_cdc_interface_c_691df63312CDC_Itf_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to usbd_cdc_interface_c]::CDC_Itf_Init() &rArr; USBD_CDC_SetTxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_interface.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>[local to usbd_cdc_interface_c]::CDC_Itf_DeInit()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc_interface.o(i._ZN42_INTERNAL_20_usbd_cdc_interface_c_691df63314CDC_Itf_DeInitEv))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_interface.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>[local to usbd_cdc_interface_c]::CDC_Itf_Control(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, usbd_cdc_interface.o(i._ZN42_INTERNAL_20_usbd_cdc_interface_c_691df63315CDC_Itf_ControlEhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to usbd_cdc_interface_c]::CDC_Itf_Control(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_interface.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>[local to usbd_cdc_interface_c]::CDC_Itf_Receive(unsigned char*, unsigned*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usbd_cdc_interface.o(i._ZN42_INTERNAL_20_usbd_cdc_interface_c_691df63315CDC_Itf_ReceiveEPhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to usbd_cdc_interface_c]::CDC_Itf_Receive(unsigned char*, unsigned*) &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdg_start
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdg_setup
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_interface.o(.data)
</UL>
<P><STRONG><a name="[1df]"></a>[local to usbd_cdc_interface_c]::CDC_Itf_TxAvailable()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_cdc_interface.o(i._ZN42_INTERNAL_20_usbd_cdc_interface_c_691df63319CDC_Itf_TxAvailableEv))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Itf_Write(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1b6]"></a>[local to usbd_ctlreq_c]::USBD_GetLen(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f111USBD_GetLenEPh))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[1cb]"></a>[local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f114USBD_GetConfigEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1cc]"></a>[local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f114USBD_GetStatusEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ca]"></a>[local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f114USBD_SetConfigEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ce]"></a>[local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f115USBD_ClrFeatureEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c9]"></a>[local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f115USBD_SetAddressEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1cd]"></a>[local to usbd_ctlreq_c]::USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f115USBD_SetFeatureEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c8]"></a>[local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, usbd_ctlreq.o(i._ZN35_INTERNAL_13_usbd_ctlreq_c_f346f8f118USBD_GetDescriptorEP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = [local to usbd_ctlreq_c]::USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[205]"></a>[local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, usbd_desc.o(i._ZN33_INTERNAL_11_usbd_desc_c_VCP_Desc12IntToUnicodeEjPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_desc_c]::Get_SerialNum()
</UL>

<P><STRONG><a name="[1f5]"></a>[local to usbd_desc_c]::Get_SerialNum()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_desc.o(i._ZN33_INTERNAL_11_usbd_desc_c_VCP_Desc13Get_SerialNumEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = [local to usbd_desc_c]::Get_SerialNum() &rArr; [local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usbd_desc_c]::IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
</UL>

<P><STRONG><a name="[23d]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
